const express = require('express')  // quando estÃ¡ na pasta "node_modules", nÃ£o Ã© necessÃ¡rio colocar o endereÃ§o
const app = express()               // Passa todas as funÃ§Ãµes do express para a constante "app"

const bodyParser = require('body-parser')   // Trabalhar com o body das requisiÃ§Ãµes

const saudacao = require('./saudacaoMid')   // Como foi exportado dentro do index, pode importar pelo "require"
const usuarioApi = require('./api/usuario') // forma padrÃ£o de importar os mÃ³dulos
require('./api/produto') (app, 'Chamar passando parametro!') // Outra forma de importar mÃ³dulos
// Outro modo de importar e passar parametros
/*const produtoApi = require('./api/produto')
produtoApi(app, 'Passar parametro!') */




app.use(bodyParser.text())  // pega apenas texto
app.use(bodyParser.json())  // Pega apenas json
app.use(bodyParser.urlencoded({extended: true}))    // Pega dados de formulÃ¡rio

app.use(saudacao('JÃ£o'))    // Usando/chamando uma funÃ§Ã£o Midlleware

app.post('/usuario', usuarioApi.salvar)
app.get('/usuario', usuarioApi.obter)


// Pode ter apenas uma saida (resposta) em cada "chamada"

// Ele para na primeira "chamada" q for aceito
// Se a primeira for a mais genÃ©rica (igual a abaixo), nunca acesssarÃ¡ as demais
//Toda vez que qualquer subdominio Ã© acessado, ele vai ser chamado. Independentemente do mÃ©todo/requisiÃ§Ã£o utilizado
app.use((req, res, next) => {
    //res.send('Acessou!!!')
    console.log('Entrou no domÃ­nio');
    next()
})

// RequisiÃ§Ãµes do tipo "GET" passam parametros pela URL
// RequisiÃ§Ãµes do tipo "POST" sÃ£o passados no corpo da requisiÃ§Ã£o
// URL => [localhost:3000/clientes/relatorio?completo=true&ano=2020]
app.get('/clientes/relatorio', (req, res) => {
    res.send(`Cliente relatÃ³rio: completo ${req.query.completo}, ano = ${req.query.ano}`)
})

// Tem que passar parametros pelo navegador 
// pode ser text, xml, json, ...
app.post('/corpo', (req, res) => {
    /*  //  Pegar o "body manualmente"
    let corpo = ''
    req.on('data', function(parte) {
        corpo += parte
    })

    req.on('end', function(){
        res.send(corpo)
    })*/

    // Pegar o body pela extensÃ£o
    res.send(req.body)
})

// Pegar informaÃ§Ã£o pela URL (no caso, o parametro passado depois de "/clientes/", serÃ¡ chamado de "id" [:id])
app.get('/clientes/:id', (req, res) => {
    res.send(`Cliente ${req.params.id} selecionado!`)
})

// Quando se tem mais que uma chamada para o mesmo endereÃ§o
// Poedemos utilizar o "next()", que farÃ¡ com que chame a prÃ³xima instruÃ§Ã£o 
app.use('/hwe', (req, res, next) => {
    console.log('Acessou a primeira parte!!')
    next()
})

app.use('/hwe', (req, res) => {     // Subdominio especifico
    // Enviar mais dados
    res.json({
        data:[
            {id: 7, name: 'Ana', position: 1},
            { id: 34, name: 'Bia', position: 2 },
            { id: 73, name: 'Carlos', position: 3}
        ],
        count: 30,
        skip: 0,
        limit: 3,
        status: 200
    })
    console.log('MÃ³dulo principal...')

    /*  // Enviar array de objetos e jsom
    res.json([
        {id: 7, name: 'Ana', position: 1},
        {id: 34, name: 'Bia', position: 2},
        {id: 73, name: 'Carlos', position: 3}
    ])*/

    /* //   Enviar Objeto
    res.json({
        name: 'Tablet 32Gb',
        price: 1899.00,
        discount: 0.12
    })*/
    //res.send('PÃ¡gina hwe ðŸ¤–')
})

app.get('/get', (req, res) => {             // RequisiÃ§Ã£o do tipo get
    res.send('get ðŸ‘‰')
})


app.listen(3000, () => {
    console.log('Backend executando ...')
})